#!/bin/bash

# Bash script to generate articles from DOCX files. 
# Generates XML, PDF and TEX files for each article. 

# Update to the newest version using git
git pull --rebase

# Set Paths
BASE_DIR="../submission"
BD=$(pwd)  # Base directory


# Update to the newest version using git
git pull --rebase

# Check if articles.txt is empty or missing
if [ ! -s "articles.txt" ]; then
  echo "articles.txt is empty or missing. Processing all directories in $INPUT_BASE_DIR."
  # If articles.txt is empty or missing, iterate over all subdirectories in INPUT_BASE_DIR
  ARTICLE_DIRS=("$BASE_DIR"/*/)
else
  echo "articles.txt found and contains entries. Processing directories listed in articles.txt."
  # If articles.txt contains entries, read directories from the file
  ARTICLE_DIRS=$(<articles.txt)
fi

# Iterate over the list of directories 
for ARTICLE_DIR in ${ARTICLE_DIRS[@]}; do
  echo "ARTICLE DIR: $ARTICLE_DIR"
  
  # Navigate to the current article directory
  cd "$ARTICLE_DIR" || exit 1
  
  # Get the article name based on directory name
  ARTICLE=$(basename "$ARTICLE_DIR")
  echo "ARTICLE: $ARTICLE" 

  # Check if the main docx file exists
  DOCX_FILE="text.docx"
  if [ ! -f "$DOCX_FILE" ]; then
    echo "Error: Docx file '$Docx_FILE' not found in $ARTICLE_DIR. Exiting."
    exit 1
  fi

  # Check if metadata file exists
  METADATA_FILE="author_meta.yaml"
  if [ ! -f "$METADATA_FILE" ]; then
    echo "Error: Metadata file '$METADATA_FILE' not found in $ARTICLE_DIR. Exiting."
    exit 1
  fi
  
  # Convert Docx to Markdown 
  echo -e "\n\nconverting $DOCX_FILE to ${ARTICLE}_intext_replaced.md"
  pandoc \
    "text.docx" \
    --output "${ARTICLE}_intext_replaced.md" \
  && git add "${ARTICLE}_intext_replaced.md" \
  && git commit -m "data(output): generated ${ARTICLE}_intext_replaced.md" \
  && git push
  echo -e "done"

  # Fix conversion issues in Markdown file
  echo -e "\n\n Fix conversion issues in ${ARTICLE}_intext_replaced.md"
  python3 "$BD/scripts/fix_markdown.py" "${ARTICLE}_intext_replaced.md" -o "${ARTICLE}_intext_replaced.md" \
  && git add "${ARTICLE}_intext_replaced.md" \
  && git commit -m "data(output): generated ${ARTICLE}_intext_replaced.md" \
  && git push
  echo -e "done"

  # Find the bibliography file (supports multiple formats like .json, .bib, etc.)
  BIBLIOGRAPHY_FILE=$(find . -maxdepth 1 -type f -name 'bibliography.*' | head -n 1)
  if [ -z "$BIBLIOGRAPHY_FILE" ]; then
    echo "Error: No bibliography file found in $ARTICLE_DIR. Exiting."
    exit 1
  else
    echo "Using bibliography file: $BIBLIOGRAPHY_FILE"
  fi

  # Check if the main markdown file exists
  MARKDOWN_FILE="${ARTICLE}_intext_replaced.md"
  if [ ! -f "$MARKDOWN_FILE" ]; then
    echo "Error: Markdown file '$MARKDOWN_FILE' not found in $ARTICLE_DIR. Exiting."
    exit 1
  fi

  # Generate PDF file
  echo -e "\n\ngenerating $ARTICLE.pdf"
  pandoc \
    --defaults="$BD/fortext-hefte.yaml" \
    --defaults=latex.yaml \
    --metadata-file="$METADATA_FILE" \
    --variable=logo:"$FORTEXTLOGO" \
    --include-in-header=caption.tex \
    --bibliography="$BIBLIOGRAPHY_FILE" \
    "${ARTICLE}_intext_replaced.md" \
    --output "$ARTICLE.pdf" \
  && git add "$ARTICLE.pdf" \
  && git commit -m "data(output): generated $ARTICLE.pdf" \
  && git push
  echo -e "done"

  # Generate Cover for Appendices
  echo -e "\n\ngenerating appendix covers for $ARTICLE"
  "$BD/mkappendix"

  # Generate XML File
  echo -e "\n\ngenerating $ARTICLE.xml"
  pandoc \
    --defaults="$BD/fortext-hefte.yaml" \
    --defaults=jats.yaml \
    --metadata-file="$METADATA_FILE" \
    --bibliography="$BIBLIOGRAPHY_FILE" \
    "${ARTICLE}_intext_replaced.md" \
    --to jats \
    --output $ARTICLE.xml \
  && git add $ARTICLE.xml \
  && git commit -m "data(output): generated $ARTICLE.xml" \
  && git push
  echo -e "done"

  # Format the XML file using the Python script
  echo -e "\nFormatting $ARTICLE.xml"
  python3 "$BD/scripts/format_xml.py" "$ARTICLE.xml" \
  && echo -e "The XML file '$ARTICLE.xml' has been formatted." \
  && git add "$ARTICLE.xml" \
  && git commit -m "data(output): formatted $ARTICLE.xml" \
  && git push
  echo -e "done"

  # Generate TeX file
  echo -e "\n\ngenerating $ARTICLE.tex"
  pandoc \
    --defaults="$BD/fortext-hefte.yaml" \
    --defaults=latex.yaml \
    --include-in-header=caption.tex \
    --metadata-file="$METADATA_FILE" \
    --bibliography="$BIBLIOGRAPHY_FILE" \
    "${ARTICLE}_intext_replaced.md" \
    --output "$ARTICLE.tex" \
  && git add "$ARTICLE.tex" \
  && git commit -m "data(output): generated $ARTICLE.tex" \
  && git push
  echo -e "done"

  # Return to the base directory for the next iteration
  cd "$BD" || exit 1

done
